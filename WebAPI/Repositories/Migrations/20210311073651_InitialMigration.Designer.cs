// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

namespace Repositories.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210311073651_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Dhaka",
                            CreatedAt = new DateTime(2021, 3, 11, 7, 36, 51, 81, DateTimeKind.Utc).AddTicks(3380),
                            CreatedBy = "Admin",
                            Email = "sudiptakumar.shuvo@gmail.com",
                            LastUpdatedAt = new DateTime(2021, 3, 11, 7, 36, 51, 81, DateTimeKind.Utc).AddTicks(4338),
                            LastUpdatedBy = "Admin",
                            Name = "Sudipta Kumar Bhowmick",
                            PasswordHash = new byte[] { 45, 220, 105, 184, 117, 191, 166, 101, 95, 222, 191, 111, 86, 196, 213, 246, 69, 209, 156, 200, 30, 132, 249, 104, 50, 64, 199, 196, 200, 118, 53, 8, 12, 181, 79, 226, 58, 213, 17, 8, 205, 210, 54, 166, 23, 178, 95, 77, 56, 22, 117, 22, 171, 164, 242, 130, 44, 194, 193, 123, 104, 58, 222, 11 },
                            PasswordSalt = new byte[] { 198, 21, 229, 211, 197, 27, 42, 204, 45, 185, 27, 84, 202, 96, 128, 152, 241, 251, 56, 44, 153, 25, 151, 22, 55, 14, 20, 45, 29, 179, 104, 123, 122, 225, 20, 145, 204, 181, 48, 66, 158, 206, 127, 181, 195, 142, 167, 14, 129, 204, 139, 18, 143, 127, 181, 251, 165, 205, 21, 220, 101, 200, 157, 222, 32, 29, 67, 250, 122, 68, 58, 78, 51, 243, 57, 144, 61, 62, 95, 196, 160, 54, 75, 221, 198, 77, 78, 37, 179, 161, 202, 175, 218, 111, 87, 142, 56, 113, 109, 128, 212, 249, 82, 223, 120, 73, 10, 203, 4, 86, 112, 119, 185, 243, 252, 205, 2, 245, 49, 151, 230, 156, 129, 3, 42, 114, 5, 1 },
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Models.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2021, 3, 11, 7, 36, 51, 74, DateTimeKind.Utc).AddTicks(247),
                            CreatedBy = "Admin",
                            LastUpdatedAt = new DateTime(2021, 3, 11, 7, 36, 51, 74, DateTimeKind.Utc).AddTicks(1235),
                            LastUpdatedBy = "Admin",
                            RoleDescription = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2021, 3, 11, 7, 36, 51, 74, DateTimeKind.Utc).AddTicks(2169),
                            CreatedBy = "Admin",
                            LastUpdatedAt = new DateTime(2021, 3, 11, 7, 36, 51, 74, DateTimeKind.Utc).AddTicks(2173),
                            LastUpdatedBy = "Admin",
                            RoleDescription = "User"
                        });
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Models.UserWishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWishlists");
                });

            modelBuilder.Entity("Models.Models.Admin", b =>
                {
                    b.HasOne("Models.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.HasOne("Models.Models.Role", "Role")
                        .WithMany("AdminUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Models.UserWishlist", b =>
                {
                    b.HasOne("Models.Models.User", "User")
                        .WithMany("UserWishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Role", b =>
                {
                    b.Navigation("AdminUsers");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Navigation("UserWishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
